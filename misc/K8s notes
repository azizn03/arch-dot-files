
contents

1. K8s Architecture.
  1.1 ETCD
  1.2 Kube-API-Server
  1.3 Kube Controller Manager
  1.4 Kube Scheduler 
  1.5 Kublet
  1.6 Kube Proxy
  1.7 Pods

look into kubectl expose 

TIPS

Default object created in K8s is clusterIP.

BASIC COMMANDS

kubectl create -f .yml  - create new object
kubectl create namespace dev - create namespace named dev.
kubectl replace -f .yml - update existing object.
kubectl get all         - show all commands.
Relica scaling

kubectl scale --replicas=6 -f relica-definition.yml
kubectl scale --replicas=6 replicaset myapp-replicaset
kubectl delete replicaset myapp-replicaset              // will also delete pods related to this.

--namespace namespace - use this flag to create object in that namespace.

1. K8s Architecture

1.1. ETCD port 2379 by default

Stores infomation in a key and value format, cannot have duplicate keys.

Key  Value

Name     John Doe
Age      45
Location New york
Salary   5000

Put name "John Doe"

Get Name
"John Doe"

in K8s it stores data related to Nodes, PODs, Configs, Secrets, Accounts, Roles, Bindings and others. 

kubectl get command pulls infomation from ETCD
Any changes made to the architecture is updated on the ETCD server.
change is considered completed once it has been updated on the ETCD server.

1.2. Kube-API-Server

Authenticates and validates commands then goes to the ETCD server to request the infomation.

Kube-API-server is the only service that talks to ETCD 

Create a pod, command is sent to ETCD then updated and goes back to the API-server to tell the user it is created.

Authenticate user, validate request, retrieve data, update etcd, scheduler then kublet.

1.3. Kube Controller Manager

Manages various controllers within K8s (Watch status and remediate situation)

CONTROLLERS 

Node-Controller checks the health status of the nodes every 5 seconds through the kube-api server. 
If a node is unreachable for 40 seconds the state is changed to unreacable.
After 5 mins it will move the pods from that node to healthy ones.

Relication-controlle checks the status of replica sets to see if the deserised number of pods are abalible within the replica sets.
If a pod goes down it creates another pod.

1.4. Kube Scheduler

Schedudles pods on nodes. Decides which node they should go to but does not move the pod itself.
2 phases for scheduling - checks to see if for example there is enough resources.
Checks to see the remaining resources after the pod is placed in the 2nd phase.

1.5. Kublet

Kublet service per node, registers the node with the K8s cluster. 

When a request comes in for a new pod it talks to the container runtime engine (docker) 
monitors the nodes and relays the infomation back to the api-server.

1.6. Kube Proxy

Kube proxy is a process that runs on each node of the cluster.

creates an IP tables rule for each node of the cluster to forward traffic to each service. 

1.7. Pods

Pods are the smallest objects you can create in K8s.
kubectl run nginx --image nginx runs the nginx image in a new pod.

pod-defination
apiVersion: v1   // depending on the kind this would relate to that.
kind:            // Values like Pod, Service, ReplicaSet and Deployment
metadata:
  name: myapp-pod      // name of pod
  labels:              // ways to group the pod together, can put anything from app to location.
      app: myapp       // name of app
      type: front-end  // group the pods
spec:                  // unique to the kind your making
  containers:
    - name: nginx-container
      image: nginx     // name of the image

1.8. Replica Sets

As the name suggests it relicates an instance of a pod. Load balancing and scaling can be setup to share the traffic. 

rc-definition.yml

apiVersion: v1
kind: ReplicationController
metadata:
  name: myapp-rc
  labels:
      app: myapp
      type: front-end
spec:
  template:
    metadata:
     name: myapp-pod      // name of pod
     labels:              // ways to group the pod together, can put anything from app to location.
        app: myapp       // name of app
        type: front-end  // group the pods
    spec:                  // unique to the kind your making
      containers:
      - name: nginx-container
        image: nginx     // name of the image
  replicas: 3

replicaset-definition.yml

apiVersion: apps/v1   
kind: ReplicaSet            
metadata:
  name: myapp-replicaset
  labels:        
      app: myapp 
      type: front-end
spec:                
template:               // Mainly so if a pod was too fail the replicaSet knows what to replicate.
  metadata:
   name: myapp-pod      // name of pod
   labels:              // ways to group the pod together, can put anything from app to location.
      app: myapp       // name of app
      type: front-end  // group the pods
  spec:                  // unique to the kind your making
    containers:
    - name: nginx-container
      image: nginx     // name of the image
  replicas: 3
  selector:    // for grouping pods that was created before the creation of the ReplicaSet.
     matchLabels:
        type: front-end

1.9. Deployments

apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-replicaset
  labels:
      app: myapp
      type: front-end
spec:
template:               // Mainly so if a pod was too fail the replicaSet knows what to replicate.
  metadata:
   name: myapp-pod      // name of pod
   labels:              // ways to group the pod together, can put anything from app to location.
      app: myapp       // name of app
      type: front-end  // group the pods
  spec:                  // unique to the kind your making
    containers:
    - name: nginx-container
      image: nginx     // name of the image
  replicas: 3
  selector:    // for grouping pods that was created before the creation of the ReplicaSet.
     matchLabels:
        type: front-end

generate image: kubectl run nginx --image=nginx

1.10. Namespaces

To isolate objects like dev enviorments and production.

kubectl create namespace dev
change to create resources in dev namespace.
  kubectl config set-context minikube --namespace dev
--namespace namespace - use this flag to create object in that namespace.
--all-namespaces - use this flag to list object in all namespaces.

To communicate within the same namepsace 

 mysql.connect("db-service")

 mysql,connect("db-service.dev.svc.cluster.local") 0 if namespace is named dev.

namespace-dev.yml

apiVersion: v1
kind: Namespace
metadata:
    name: dev

ResourceQuota - specifiy hardware useage within the name space.

1.11. Services

helps connect applications together. i.e. other objects. Default type is clusterIP.

Nodeport - forwards the traffic from the open port on the node to the relevant pod. 
  TargetPort - Where the service forwards the request to this port located on the container. 
  Port       - Port on the service itself.
  NodePort   - Port that is used to connect to the Node from an external connection. Port range 30000 - 32767
clusterIP - creates a virtual IP for internal communication.
LoadBalancer - Provides a load balancer within a support cloud load balancer service. 

Service-definition.yml

apiVersion: v1
kind: Service
metadata:
  name: myapp-service
spec:
    type: NodePort
    ports:
     - targetPort: 80
       port: 80
       nodePort: 30008
    selector:
       app: myapp
       type: front-end

1.12. ClusterIP

group pods together in a single interface for internal communcation between mutliple pods.

apiVersion: v1
kind: Service
metadata:
  name: back-end
spec:
    type: ClusterIP
    ports:
     - targetPort: 80
       port: 80
    selector:
       app: myapp
       type: back-end

1.13. LoadBalancer

Used to link this object to the cloud platform so the traffic between the pods on the different nodes is shared through one interface. 

apiVersion: v1
kind: Service
metadata:
  name: myapp-service
spec:
    type: LoadBalancer
    ports:
     - targetPort: 80
       port: 80
       nodePort: 30008

